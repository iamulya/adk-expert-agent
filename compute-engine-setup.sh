#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e
# Treat unset variables as an error when substituting.
set -u
# Pipestatus: The return value of a pipeline is the status of
# the last command to exit with a non-zero status.
set -o pipefail

echo "--- Starting Python 3.12, uv, Node.js, Angular CLI, Mermaid & Marp Setup ---"

# 1. Update package lists and upgrade existing packages
echo "--- Updating system packages ---"
sudo apt update && sudo apt upgrade -y

# 2. Install prerequisites and fix potential add-apt-repository issues
echo "--- Installing prerequisite packages (curl, build-essential, lsb-release) ---"
sudo apt install -y curl build-essential lsb-release # lsb-release needed for lsb_release -sc

echo "--- Ensuring software-properties-common and its dependencies are correctly installed ---"
sudo apt install -y software-properties-common python3-launchpadlib
sudo apt install --reinstall -y software-properties-common

# 3. Add deadsnakes PPA for Python 3.12
echo "--- Adding deadsnakes PPA for Python 3.12 ---"
# This will add the GPG key and create the .list file.
# It might use the system's codename (e.g., bookworm) which might not exist in the PPA.
sudo add-apt-repository -y ppa:deadsnakes/ppa

# Determine the system's codename as detected by LSB
LSB_CODENAME=$(lsb_release -sc)
UBUNTU_COMPAT_CODENAME="jammy" # Use Jammy (Ubuntu 22.04 LTS) as a compatible base

# If the system codename is not what the PPA supports directly (e.g. 'bookworm' instead of 'jammy'),
# find the PPA file and change the codename to a compatible Ubuntu one.
# The file name generated by add-apt-repository uses the LSB_CODENAME.
DEADSNAKES_PPA_FILE_EXPECTED="/etc/apt/sources.list.d/deadsnakes-ubuntu-ppa-${LSB_CODENAME}.list"
# Sometimes the actual filename might vary slightly, e.g. if the PPA name has hyphens.
# Let's find the most likely file.
ACTUAL_PPA_FILE=$(find /etc/apt/sources.list.d/ -name "*deadsnakes*${LSB_CODENAME}*.list" -print -quit)

# If not found with LSB_CODENAME, try a more generic search for deadsnakes files
if [ -z "$ACTUAL_PPA_FILE" ]; then
    ACTUAL_PPA_FILE=$(find /etc/apt/sources.list.d/ -name "*deadsnakes*.list" -print -quit)
fi


if [ -n "$ACTUAL_PPA_FILE" ] && [ -f "$ACTUAL_PPA_FILE" ]; then
    echo "System codename detected as '${LSB_CODENAME}'."
    echo "Checking/Modifying PPA file '${ACTUAL_PPA_FILE}' to use Ubuntu '${UBUNTU_COMPAT_CODENAME}' for compatibility."
    # Replace the detected codename with the compatible Ubuntu codename in the PPA file URL.
    sudo sed -i "s/ubuntu ${LSB_CODENAME}/ubuntu ${UBUNTU_COMPAT_CODENAME}/g" "${ACTUAL_PPA_FILE}"
    # Also, some PPA lines might just have the codename without 'ubuntu ' prefix in the path part
    sudo sed -i "s/${LSB_CODENAME}/${UBUNTU_COMPAT_CODENAME}/g" "${ACTUAL_PPA_FILE}"
    # Example: deb https://ppa.launchpadcontent.net/deadsnakes/ppa/ubuntu focal main
    # We want: deb https://ppa.launchpadcontent.net/deadsnakes/ppa/ubuntu jammy main
else
    echo "WARNING: Could not find the deadsnakes PPA file to modify. Python 3.12 installation might fail if '${LSB_CODENAME}' is not supported by the PPA."
    echo "Checked for: ${DEADSNAKES_PPA_FILE_EXPECTED} and generic *deadsnakes*.list"
fi

sudo apt update # Update package list again after PPA is added/modified

# 4. Install Python 3.12
echo "--- Installing Python 3.12, python3.12-dev, and python3.12-venv ---"
sudo apt install -y python3.12 python3.12-dev python3.12-venv

# 5. Ensure pip for Python 3.12 is installed and upgraded
echo "--- Ensuring pip for Python 3.12 is installed and upgraded ---"
python3.12 -m ensurepip --upgrade
python3.12 -m pip install --upgrade pip

# 6. Install uv (universal Python package installer/resolver)
echo "--- Installing uv ---"
curl -LsSf https://astral.sh/uv/install.sh | sh

# 7. Add Nodesource PPA for Node.js LTS (currently 20.x)
echo "--- Setting up Nodesource repository for Node.js LTS (20.x) ---"
curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -

# 8. Install Node.js and npm
echo "--- Installing Node.js and npm ---"
sudo apt-get install -y nodejs

# 9. Install common dependencies for headless Chromium (used by Puppeteer for Marp CLI)
echo "--- Installing common dependencies for headless Chromium (Puppeteer) ---"
sudo apt-get install -y \
    libnss3 \
    libxss1 \
    libasound2 \
    libgbm1 \
    libatk1.0-0 \
    libatk-bridge2.0-0 \
    libcups2 \
    libdrm2 \
    libxkbcommon0 \
    libxcomposite1 \
    libxdamage1 \
    libxfixes3 \
    libxrandr2 \
    libfontconfig1 \
    libpango-1.0-0 \
    libcairo2 \
    libu2f-udev

# 10. Install Angular CLI globally
echo "--- Installing Angular CLI globally ---"
sudo npm install -g @angular/cli

# 11. Install Mermaid CLI (mmdc) globally
echo "--- Installing Mermaid CLI (mmdc) globally ---"
sudo npm install -g @mermaid-js/mermaid-cli

# 12. Install Marp CLI globally
echo "--- Installing Marp CLI globally ---"
sudo npm install -g @marp-team/marp-cli

echo "--- Installation Complete! Verifying versions... ---"

echo -n "Python 3.12: "
python3.12 --version

echo -n "pip (for Python 3.12): "
python3.12 -m pip --version

echo -n "uv: "
if command -v ~/.cargo/bin/uv &> /dev/null; then
    ~/.cargo/bin/uv --version
elif command -v uv &> /dev/null; then
    uv --version
else
    echo "uv command not found in PATH. Please add ~/.cargo/bin to your PATH."
fi

echo -n "Node.js: "
node --version

echo -n "npm: "
npm --version

echo -n "Angular CLI: "
ng --version

echo -n "Mermaid CLI (mmdc): "
if command -v mmdc &> /dev/null; then
    mmdc --version
else
    echo "mmdc command not found."
fi

echo -n "Marp CLI: "
if command -v marp &> /dev/null; then
    marp --version
else
    echo "marp command not found."
fi

echo ""
echo "--- Setup Finished Successfully! ---"
echo "IMPORTANT: You might need to open a new terminal or run 'source ~/.bashrc' for PATH changes (especially for 'uv') to take effect."